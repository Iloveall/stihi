angular
  .module('app', [
    'ngRoute',
    'ngDialog'
  ])
  .config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/', {
      templateUrl: 'js/view/post/list.html',
      controller: 'blogCtrl as blogCtrl'
    });
  }]);
  // .config(['$routeProvider', function($routeProvider) {
  //   $routeProvider.otherwise({redirectTo: '/view1'});
  // }]);

angular
  .module('app')
  .factory('User', ['$rootScope', '$http', '$window', function ($rootScope, $http, $window) {

    'use strict';

    console.log('User');

    var HTTP_URL = 'api/user'

    var f = {};

    var user = null;

    f.getUser = function () {
      return user;
    };

    f.setUser = function (user) {
      user = user;
      f.setToken(user.api_token);
      $rootScope.$broadcast('setAuthOn', {user: user});

      return user;
    };

    f.destroyUser = function (user) {
      user = null;
    }

    f.setToken = function (token) {
      $window.localStorage.setItem('api_token', token);
    };

    f.getToken = function () {
      return $window.localStorage.getItem('api_token');
    };

    f.destroyToken = function () {
      return $window.localStorage.removeItem('api_token');
    };

    f.getTokenParam = function () {
      return 'api_token=' + f.getToken();
    }

    f.create = function (data) {
      return $http.post(HTTP_URL + '/create', data);
    };

    f.auth = function (data) {
      return $http.post(HTTP_URL + '/auth', data);
    };

    f.exit = function () {
      f.destroyToken();
      f.destroyUser();
      $rootScope.$broadcast('userExit', {});
    };

    f.getIsAuth = function () {
      return $http.get(HTTP_URL + '/is-auth?' + f.getTokenParam());
    };

    return f;

  }]);

angular
  .module('app')
  .controller('blogCtrl', ['$scope', 'ngDialog', 'Post', function ($scope, ngDialog, Post) {

    'use strict';

    var c = {};

    c.isSpinner = false;
    c.isAnimation = true;

    c.posts = null;

    $scope.$watch(function(){

      return c.posts;

    }, function(oldData, newData) {

      Post.posts = c.posts;

      console.log('watch posts', c.posts);

    });

    c.getBlogs = function () {

      Post.get().success(function(response) {
        c.posts = response.data.posts;
        // console.log(c.posts);
      });

    };

    c.openPost = function (id) {

      var post = c.getPostById(id);

      ngDialog.open({
        template: 'js/post/template/post-popup.html',
        className: 'ngdialog-theme-default',
        showClose: true,
        closeByDocument: true,
        closeByEscape: true,
        controller: 'postCtrl',
        controllerAs: 'postCtrl',
        data: {
          post: post
        }
      });
    };

    c.openAdd = function () {
      ngDialog.open({
        template: 'js/post/template/add-popup.html',
        className: 'ngdialog-theme-default',
        showClose: true,
        closeByDocument: true,
        closeByEscape: true,
        controller: 'postCtrl',
        controllerAs: 'postCtrl'
      });
    };

    c.getPostById = function (id) {
      return _.find(c.blogs, function(o) { return o.id === id; });
    };

    $scope.$on('postUpdate', function (data, post) {
      console.log('post update', post);
      c.posts.unshift(post);
    });

    $scope.$on('postDelete', function (data, id) {
      console.log('post delete', id);

      _.remove(c.posts, {
          id: id
      });

    });

    return c;

  }]);

angular
  .module('app')
  .controller('authCtrl', ['$scope', 'ngDialog', 'User', function ($scope, ngDialog, User) {

    'use strict';

    var c = {};

    $scope.user = {};
    c.authErrors = null;
    c.authMessages = null;
    c.isAuthSuccess = false;

    // console.log('authCtrl');

    c.register = function (form) {

      if (form) {
        form.$setPristine();
        form.$setUntouched();
      }

      if (form.$invalid) {
        return;
      }

      User.create($scope.user).success(function(response) {

        c.user = response.user;
        c.authMessages = response.messages;
        c.authErrors = null;

      }).error(function(response) {

        c.authErrors = response.errors;
        c.authMessages = null;

      });
    };

    c.auth = function (form) {

      if (form) {
        form.$setPristine();
        form.$setUntouched();
      }

      if (form.$invalid) {
        return;
      }

      User.auth($scope.user).success(function(response) {

        c.user = response.user;
        c.authMessages = response.messages;
        c.authErrors = null;
        c.isAuthSuccess = true;

        User.setUser(response.user);

      }).error(function(response) {

        c.authErrors = response.errors;
        c.authMessages = null;

      });
    };

    c.authModalClose = function () {
      ngDialog.close();
    };

    return c;

  }]);

angular
  .module('app')
  .controller('appCtrl', ['$scope', 'User', function ($scope, User) {

    'use strict';

    var c = {};

    c.isAuth = false;
    c.isAuthLoaded = false;
    c.user = {};

    // User
    $scope.$watch(function () {
      return c.user;
    }, function() {
      User.setUser(c.user);
    });

    c.getIsAuth = function () {
      c.isAuthLoaded = false;
      User.getIsAuth().success(function(response) {
        c.isAuth = true;
        c.isAuthLoaded = true;
        c.user = response.data.user;
      }).error(function(response) {
        c.isAuth = false;
        c.isAuthLoaded = true;
      });
    };

    $scope.$on('setAuthOn', function(e, data) {
      c.isAuth = true;
      c.user = data.user;
      console.log(data);
    });

    $scope.$on('userExit', function() {
      c.isAuth = false;
    });

    c.getIsAuth();

    return c;

  }]);

angular
  .module('app')
  .controller('headerCtrl', ['ngDialog', 'User', function (ngDialog, User) {

    'use strict';

    var c = {};

    c.isAnimation = true;

    console.log('headerCtrl');

    c.openAuth = function () {

      ngDialog.open({
        template: 'js/auth/template/auth-popup.html',
        className: 'ngdialog-theme-default',
        showClose: true,
        closeByDocument: true,
        closeByEscape: true,
        controller: 'authCtrl',
        controllerAs: 'authCtrl'
      });

    };

    c.openRegister = function () {

      ngDialog.open({
        template: 'js/auth/template/register-popup.html',
        className: 'ngdialog-theme-default',
        showClose: true,
        closeByDocument: true,
        closeByEscape: true,
        controller: 'authCtrl',
        controllerAs: 'authCtrl'
      });

    };

    c.exit = function () {
      User.exit();
    };

    return c;

  }]);

angular
  .module('app')
  .controller('postCtrl', ['$scope', 'Post', function ($scope, Post) {

    'use strict';

    var c = {};

    c.isSpinner = false;
    c.isAdded = false;
    c.messages = null;
    $scope.post = {};
    c.isEdit = false;

    c.add = function (form) {

      console.log(form);

      if (form) {
        form.$setPristine();
        form.$setUntouched();
      }

      if (form.$invalid) {
        return;
      }

      c.isSpinner = true;
      Post.create($scope.post).success(function(response) {
        c.isSpinner = false;
        c.isAdded = true;

        Post.add(response.data.post);
        c.messages = response.messages;

      }).error(function(response) {
        c.isSpinner = false;

        c.errors = response.errors;

      });

    };

    c.showEdit = function (id) {
      c.isEdit = true;
    }

    c.edit = function (id) {

    };

    c.destroy = function (id) {

    }

    return c;

  }]);

angular
  .module('app')
  .factory('Post', ['$rootScope', '$http', 'User', function ($rootScope, $http, User) {

    'use strict';

    var f = {};

    var posts = null;

    var URL = 'api/post';

    f.get = function () {
      return $http.get(URL);
    };

    f.getById = function (id) {
      return $http.get(URL + '/' + id);
    };

    f.create = function (data) {
      return $http.get(
        URL + '/create?' + User.getTokenParam(),
        {params: data}
      );
    };

    f.update = function (data) {
      return $http.put(URL + '/' + data.id + '?' + User.getTokenParam(), data);
    }

    f.destroy = function (id) {
      return $http.delete(URL + '/' + id + '?' + User.getTokenParam(), {});
    }

    f.add = function (post) {
      $rootScope.$broadcast('postUpdate', post);
    };

    f.delete = function (id) {
        $rootScope.$broadcast('postDelete', id);    
    }

    return f;

  }]);

angular
  .module('app')
  .filter('isAvatar', function() {
    return function(input) {

      if (input === "") {
        return "/img/icon/avatar.png";
      }

      return input;
    };
  })

angular
  .module('app')
  .directive('postEdit', ['$compile', 'Post', function ($compile, Post) {
    return {
      restrict: 'EA',
      scope: true,
      link: function (scope, element, attr) {

        scope.isEdit = false;

        scope.showEdit = function() {
          scope.isEdit ? scope.isEdit = false : scope.isEdit = true;
        };

        scope.update = function () {

          if (scope.form) {
            scope.form.$setPristine();
            scope.form.$setUntouched();
          }

          if (scope.form.$invalid) {
            return;
          }

          Post.update(scope.post).success(function(response) {
            scope.isEdit = false;
          });
        };

        scope.destroy = function (id) {
          Post.destroy(id).success(function(response) {
            Post.delete(id);
          });
        }

        // console.log(scope);

      }
    };
  }]);

angular
  .module('app')
  .filter('timeFilter', function() {
    return function(date) {

      moment.locale('ru');

      return moment(date).fromNow();

    };
  });
